; ===============================================================
; OnAIR â€” Configuration for AnomalyGuardrail Plugin
; Supports: CSV Replay Mode, Redis Streaming Mode, and cFS/SBN Mode
; ===============================================================

[FILES]
; ------------------------------
; FILES section is REQUIRED by ExecutionEngine in ALL modes
; ------------------------------
; --- CSV Replay Mode (default) ---
; TelemetryFilePath: Directory containing the CSV file
; TelemetryFile:     Name of the CSV file to replay
; MetaFilePath:      Directory containing the JSON schema
; MetaFile:          JSON file describing column order and metadata
; OutputDir:         Directory for all output logs

TelemetryFilePath = onair/data/raw_telemetry_data/data_physics_generation/Errors
TelemetryFile     = 700_crash_to_earth_1.csv
MetaFilePath      = onair/data/telemetry_configs
MetaFile          = data_physics_generation_CONFIG.json
OutputDir         = logs


[DATA_HANDLING]
; ------------------------------
; Select the data adapter that feeds telemetry into the system
; ------------------------------
DataSourceFile = onair/data_handling/csv_parser.py


[PLUGINS]
; ------------------------------
; Plugins to load at runtime
; ------------------------------
KnowledgeRepPluginDict = {'AnomalyGuardrail':'plugins/anomaly_guardrail'}
LearnersPluginDict     = {'csv output':'plugins/csv_output'}
PlannersPluginDict     = {}
ComplexPluginDict      = {}


[OPTIONS]
; ------------------------------
; Global runtime options
; ------------------------------
IO_Enabled = true
; Verbose = true
; SaveIntermediate = false


[anomaly_guardrail]
; ------------------------------
; Plugin-specific settings
; ------------------------------
; columns:         Indices of telemetry columns to monitor
; window:          Sliding window size for anomaly detection
; min_samples:     Minimum samples required before testing anomalies
; method:          Anomaly detection method (zscore | iqr)
; z_threshold:     Threshold for Z-score anomalies
; iqr_k:           IQR multiplier for anomaly bounds (used when method=iqr)
; stuck_threshold: Number of repeated values before flagging "stuck"
; cooldown_s:      Minimum seconds between triggering actions
; action:          Default action if severity mapping is not used
; log_csv:         Path to CSV file for logging anomaly events
; epsilon:         Small value to avoid division by zero
; severity_moderate_score:  Score threshold for classifying as "moderate"
; severity_critical_score:  Score threshold for classifying as "critical"
; stuck_moderate_factor:    Factor applied to stuck_threshold for "moderate"
; stuck_critical_factor:    Factor applied to stuck_threshold for "critical"
; severity_actions:         Mapping of severity levels to actions
;                           Format: minor:ACTION,moderate:ACTION,critical:ACTION

columns                 = 1,2,3,4,5,6
window                  = 60
min_samples             = 20
method                  = zscore
z_threshold             = 3.0
iqr_k                   = 1.5
stuck_threshold         = 25
cooldown_s              = 15
action                  = SAFE_MODE
log_csv                 = logs/anomaly_events.csv
epsilon                 = 1e-9
severity_moderate_score = 2.5
severity_critical_score = 4.0
stuck_moderate_factor   = 2.0
stuck_critical_factor   = 3.0
severity_actions        = minor:LOG_ONLY,moderate:REDUCE_LOAD,critical:SAFE_MODE

